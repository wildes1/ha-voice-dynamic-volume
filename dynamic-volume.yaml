# Dynamic Volume Control for Home Assistant Voice PE
# Repository: https://github.com/jaapp/ha-voice-dynamic-volume
# 
# This package adds ambient sound sensing and dynamic volume control
# to Home Assistant Voice PE devices.

globals:
  - id: dynamic_volume_enabled
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: last_dynamic_volume_calculation
    type: float
    restore_value: no
    initial_value: '0'

number:
  - platform: template
    name: "Dyn. Vol. Anchor"
    id: dynamic_volume_anchor
    min_value: 0.1
    max_value: 0.85
    step: 0.05
    initial_value: 0.3
    restore_value: true
    optimistic: true
    icon: "mdi:volume-high"
    unit_of_measurement: "x"
    entity_category: config
    
  - platform: template 
    name: "Dyn. Vol. Strength"
    id: dynamic_volume_strength
    min_value: 0
    max_value: 5
    step: 0.1
    initial_value: 1.0
    restore_value: true
    optimistic: true
    icon: "mdi:volume-vibrate"
    unit_of_measurement: "x"
    entity_category: config

switch:
  - platform: template
    name: "Dynamic Volume"
    id: dynamic_volume_switch
    icon: "mdi:volume-vibrate"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    turn_on_action:
      - lambda: id(dynamic_volume_enabled) = true;
      - script.execute: update_dynamic_volume
    turn_off_action:
      - lambda: |-
          id(dynamic_volume_enabled) = false;
          // Reset to anchor volume when disabled
          id(external_media_player)
            ->make_call()
            .set_volume(id(dynamic_volume_anchor).state)
            .perform();

sensor:
  # Peak amplitude sensor
  - platform: template
    name: "Ambient Sound Peak"
    id: ambient_sound_peak
    unit_of_measurement: "max"
    accuracy_decimals: 6
    update_interval: 5s
    icon: "mdi:microphone-outline"
    state_class: "measurement"
    entity_category: "diagnostic" 
    filters:
      - throttle: 5s
    lambda: |-
      static const char *const TAG = "ambient_sound";
      static const size_t INPUT_BUFFER_SIZE = 512;
      static int16_t input_buffer[INPUT_BUFFER_SIZE];
      
      // Don't measure when media is playing to avoid feedback
      if (id(external_media_player)->state != media_player::MEDIA_PLAYER_STATE_IDLE) {
        ESP_LOGD(TAG, "Media player not idle.");
        return id(ambient_sound_peak).state; // Return previous value
      }
      
      // Check if micro_wake_word is ready
      if (!id(mww).is_ready()) {
        ESP_LOGD(TAG, "Micro wake word not ready yet");
        return 0;
      }

      // Start mic if needed
      if (!id(i2s_mics)->is_running()) {
        id(i2s_mics)->start();
        delay(50); // Give mic time to start
      }

      size_t bytes_read = id(i2s_mics)->read_(
        input_buffer, 
        INPUT_BUFFER_SIZE * sizeof(int16_t),
        0
      );
      
      if (bytes_read == 0) {
        memset(input_buffer, 0, INPUT_BUFFER_SIZE * sizeof(int16_t));
        ESP_LOGD(TAG, "No samples read from microphone");
        return 0;
      }
      
      size_t samples_read = bytes_read / sizeof(int16_t);
      
      // Find maximum absolute value
      float max_value = 0;
      for (size_t i = 0; i < samples_read; i++) {
        float normalized = abs(input_buffer[i]) / 32768.0f;
        max_value = max(max_value, normalized);
      }
      
      ESP_LOGD(TAG, "Max amplitude: %.6f", max_value);
      return max_value;

  # Linear scaling sensor
  - platform: template
    name: "Ambient Sound Level Linear"
    id: ambient_sound_level
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 5s
    icon: "mdi:microphone-outline"
    state_class: "measurement"
    entity_category: "diagnostic" 
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 5
      - throttle_average: 5s
    lambda: |-
      float peak = id(ambient_sound_peak).state;
      if (std::isnan(peak)) {
        return 0;
      }
      
      // Simple linear scaling between min/max peak values
      const float MIN_PEAK = 0.000024f;
      const float MAX_PEAK = 0.9f;
      
      float percentage = 0;
      if (peak > MIN_PEAK) {
        percentage = (peak - MIN_PEAK) / (MAX_PEAK - MIN_PEAK) * 100;
        percentage = clamp(percentage, 0.0f, 100.0f);
      }
      
      ESP_LOGD("ambient_sound", "Linear Percentage: %.1f%%", percentage);
      return percentage;

  # Exponential scaling sensor
  - platform: template
    name: "Ambient Sound Level"
    id: ambient_sound_level_exp
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: 5s
    icon: "mdi:microphone-outline"
    state_class: "measurement"
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 5
      - throttle_average: 5s
    lambda: |-
      float linear_value = id(ambient_sound_level).state;
      if (std::isnan(linear_value)) {
        return 0;
      }
      
      // Apply exponential curve
      // Using x^0.4 which gives more resolution to lower values while
      // still maintaining a reasonable curve
      constexpr float exp = 0.4f;
      float percentage = pow(linear_value / 100.0f, exp) * 100.0f;
      
      ESP_LOGD("ambient_sound_exp", "Exponential scaling: %.1f%% -> %.1f%%", 
               linear_value, percentage);
      
      return percentage;

script:
  - id: update_dynamic_volume
    mode: single
    then:
      - lambda: |-
          if (!id(dynamic_volume_enabled)) return;
      
          // Don't update volume when media is playing
          if (id(external_media_player)->state != media_player::MEDIA_PLAYER_STATE_IDLE) return;
          
          float ambient_level = id(ambient_sound_level_exp).state;
          if (std::isnan(ambient_level)) return;
          
          float anchor = id(dynamic_volume_anchor).state;
          float strength = id(dynamic_volume_strength).state;
          
          // Convert ambient level to 0-1 range
          float normalized_level = ambient_level / 100.0f;
          
          // Calculate gain factor based on ambient level and strength
          float gain = 1.0f + (normalized_level * strength);
          
          // Calculate new volume 
          float new_volume = anchor * gain;
          
          // Clamp to valid range
          new_volume = clamp(new_volume, 0.0f, 1.0f);
          
          // Only update if changed significantly
          if (abs(new_volume - id(last_dynamic_volume_calculation)) > 0.01) {
            id(last_dynamic_volume_calculation) = new_volume;
            id(external_media_player)
              ->make_call()
              .set_volume(new_volume)
              .perform();
            
            ESP_LOGD("dynamic_volume", "Ambient: %.1f%%, Gain: %.2f, New Volume: %.2f", 
                     ambient_level, gain, new_volume);
          }

interval:
  - interval: 5s
    then:
      - script.execute: update_dynamic_volume

logger:
  level: INFO
  logs:
    dynamic_volume: INFO
